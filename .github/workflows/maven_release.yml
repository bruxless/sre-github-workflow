name: Maven Release

on:
  workflow_call:
    inputs:
      source_branch:
        type: string
        default: 'develop'
      destination_branch:
        type: string
        default: 'main'
      source_version:
        type: string
        required: false
      destination_version:
        type: string
        required: false
      java_version:
        type: string
        default: '17'

jobs:
  maven_release:
    runs-on: ubuntu-latest
    steps:

      - name: Set up JDK ${{ inputs.java_version }}
        uses: actions/setup-java@v3
        with:
          java-version: ${{ inputs.java_version }}
          distribution: 'temurin'
          cache: maven

      - name: Checkout ${{ inputs.destination_branch }}
        run: |
          git checkout ${{ inputs.destination_branch }}
          git fetch origin ${{ inputs.destination_branch }}

      - name: Merge ${{ inputs.source_branch }} -> ${{ inputs.destination_branch }}
        run: |
          git merge ${{ inputs.source_branch }}

      - name: Update version on ${{ inputs.destination_branch }} with default
        if: ${{ inputs.destination_version == '' }}
        run: mvn -B versions:set -DnewVersion=${{ inputs.destination_version }} --file pom.xml
      - name: Update version on ${{ inputs.destination_branch }} with version ${{ inputs.destination_version }}
        if: ${{ inputs.destination_version != '' }}
        run: mvn -B versions:set -DremoveSnapshot --file pom.xml
      - name: Retrieve project version
        id: get_version
        run: |
          echo "project_version=$(mvn help:evaluate -Dexpression=project.version -q -DforceStdout  --file pom.xml)" >> $GITHUB_OUTPUT

      - name: Git tag ${{ steps.get_version.outputs.project_version }}
        run: |
          git tag -a ${{ steps.get_version.outputs.project_version }} -m "Release ${{ steps.get_version.outputs.project_version }}"

      - name: Git push on ${{ inputs.destination_branch }}
        run: |
          git push origin ${{ inputs.destination_branch }} --tags



      - name: Checkout ${{ inputs.source_branch }}
        run: |
          git checkout ${{ inputs.source_branch }}
          git fetch origin ${{ inputs.source_branch }}

      - name: Merge ${{ inputs.destination_branch }} -> ${{ inputs.source_branch }}
        run: |
          git merge ${{ inputs.destination_branch }}

      - name: Update version on ${{ inputs.source_branch }} with default
        if: ${{ inputs.source_version == '' }}
        run: mvn -B versions:set -DnewVersion=${{ inputs.source_version }} --file pom.xml
      - name: Update version on ${{ inputs.source_version }} with version ${{ inputs.source_version }}
        if: ${{ inputs.source_version != '' }}
        run: mvn -B versions:set -DremoveSnapshot --file pom.xml
      - name: Retrieve project version
        id: get_version
        run: |
          echo "project_version=$(mvn help:evaluate -Dexpression=project.version -q -DforceStdout  --file pom.xml)" >> $GITHUB_OUTPUT

      - name: Git tag ${{ steps.get_version.outputs.project_version }}
        run: |
          git tag -a ${{ steps.get_version.outputs.project_version }} -m "Release ${{ steps.get_version.outputs.project_version }}"

      - name: Git push on ${{ inputs.source_branch }}
        run: |
          git push origin ${{ inputs.source_branch }} --tags