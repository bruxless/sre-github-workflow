name: CI for JS (NPM) microservice

on:
  workflow_call:
    inputs:
      node_version:
        description: "The node version (default to 18)"
        type: string
        required: false
        default: "20"
      slack_channel_id_ci:
        description: "The CI Slack channel's id"
        type: string
        required: true
      slack_channel_id_ci_release:
        description: "The CI release Slack channel's id"
        type: string
        required: true
      sonar_organization:
        description: "The sonar organization"
        type: string
        required: true
      sonar_host_url:
        description: "The sonar host url"
        type: string
        required: true
      sonar_project_key:
        description: "The sonar project key"
        type: string
        required: true
      project_name:
        description: "The project name"
        type: string
        required: true
      aws_region:
        description: "The AWS region"
        type: string
        required: false
        default: "eu-west-1"
      ecr_url:
        description: "The ECR url"
        type: string
        required: true
      chart_museum_url:
        description: "The ChartMuseum URL"
        type: string
        required: false
      trivy_lib_vuln_severity:
        description: "Trivy vulnerabilities level for libraries"
        type: string
        required: false
        default: "UNKNOWN,LOW,MEDIUM,HIGH,CRITICAL"
      trivy_docker_vuln_severity:
        description: "Trivy vulnerabilities levels for dockerfiles"
        type: string
        required: false
        default: "CRITICAL,HIGH"
    secrets:
      SLACK_BOT_TOKEN:
        description: "The slack bot token"
        required: true
      SONAR_TOKEN:
        description: "The sonar token"
        required: true
      AWS_ACCESS_KEY_ID:
        description: "The AWS access key"
        required: true
      AWS_SECRET_ACCESS_KEY:
        description: "The AWS secret access key"
        required: true

jobs:
  ci:
    runs-on: ubuntu-22.04
    steps:

      # Checkout project
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      # Setup and uses
      - name: Set up node ${{ inputs.node_version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ inputs.node_version }}
          cache: npm
      - name: Set up helm
        uses: azure/setup-helm@v4

      - name: Cache SonarCloud packages
        uses: actions/cache@v4
        with:
          path: ~/.sonar/cache
          key: ${{ runner.os }}-sonar
          restore-keys: ${{ runner.os }}-sonar

      # Slack message
      - name: Slack - ci - started
        id: slack
        uses: slackapi/slack-github-action@v1.27.0
        env:
          SLACK_BOT_TOKEN: ${{ secrets.SLACK_BOT_TOKEN}}
        with:
          channel-id: ${{ inputs.slack_channel_id_ci }}
          payload: |
            {
              "attachments": [
                {
                  "color": "62a0ea",
                  "title": "Build ${{ github.run_id }}-${{ github.run_number }} started",
                  "title_link": "https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}",
                  "fields": [
                    {
                      "value": ":the_horns:",
                      "short": true
                    },
                    {
                      "title": "Status",
                      "value": "In Progress",
                      "short": true
                    },
                    {
                      "title": "Repository",
                      "value": "<https://github.com/${{ github.repository }}|${{ github.repository }}>",
                      "short": false
                    },
                    {
                      "title": "Branch",
                      "value": "<https://github.com/${{ github.repository }}/tree/${{ github.ref_name }}|${{ github.ref_name }}>",
                      "short": false
                    }
                  ]
                }
              ]
            }

      # Override project version for development
      - name: Override project version
        if: |
          contains(github.ref, 'refs/heads/develop')
        run: |
          initial_project_version=$(awk -F'"' '/"version": ".+"/{ print $4; exit; }' package.json)-${{ github.run_id }}-${{ github.run_number }}
          sed -i "s/\"version\": \".*\"/\"version\": \"$initial_project_version\"/g" package.json

      # Project version and information
      - name: Retrieve project version
        id: get_version
        run: |
          echo "project_name=$(awk -F'"' '/"name": ".+"/{ print $4; exit; }' package.json)" >> $GITHUB_OUTPUT
          echo "project_version=$(awk -F'"' '/"version": ".+"/{ print $4; exit; }' package.json)" >> $GITHUB_OUTPUT
          echo "project_description=$(awk -F'"' '/"description": ".+"/{ print $4; exit; }' package.json)" >> $GITHUB_OUTPUT

      # Npm compile and tests
      - name: NodeJS install
        run: npm ci
      - name: NodeJS compile
        run: npm run build --if-present
      - name: NodeJS unit test
        run: npm run test:unit
      - name: NodeJS integration test
        run: npm run test:integration

      - name: Upload test reports
        uses: actions/upload-artifact@v4
        if: ${{ always() }}
        with:
          name: test-reports
          path: ${{github.workspace}}/target/tests

      - name: NodeJS lint
        run: npm run lint
      - name: Lint upload result npm
        if: ${{ always() }}
        uses: actions/upload-artifact@v4
        with:
          name: npm
          path: ${{github.workspace}}/target/eslint_npm.sarif

      - name: NodeJS CycloneDX
        run: npm run cyclonedx
      - name: CycloneDX upload result
        uses: actions/upload-artifact@v4
        with:
          name: cyclonedx-bom
          path: ${{github.workspace}}/target/bom.*

      # Sonar analysis
      - name: SonarCloud scan
        uses: sonarsource/sonarcloud-github-action@master
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        with:
          args: >
            -Dsonar.organization=${{ inputs.sonar_organization }}
            -Dsonar.host.url=${{ inputs.sonar_host_url }}
            -Dsonar.projectKey=${{ inputs.sonar_project_key }}
      - name: SonarCloud Quality Gate check
        id: sonarcloud-quality-gate-check
        if:
          contains(github.ref, 'refs/heads/main') ||
          contains(github.ref, 'refs/heads/release') ||
          contains(github.ref, 'refs/heads/develop')
        uses: sonarsource/sonarqube-quality-gate-action@master
        timeout-minutes: 5
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

      # Dependencies checking
      - name: Trivy scan npm
        uses: aquasecurity/trivy-action@0.24.0
        with:
          scan-type: 'fs'
          ignore-unfixed: false
          output: "trivy_npm.sarif"
          format: 'sarif'
          vuln-type: 'library'
          severity: '${{ inputs.trivy_lib_vuln_severity }}'
          scanners: 'vuln'
          timeout: '7m'

      - name: Trivy upload result npm
        if: ${{ always() }}
        uses: actions/upload-artifact@v4
        with:
          name: trivy-npm
          path: ${{github.workspace}}/trivy_npm.sarif

      # Prepare distribution files (docker and helm)
      - name: Docker Prepare
        run: |
          mkdir -p target/docker/
          cp -r docker/* target/docker/
          grep -rlZ "@project.artifactId@" target/docker | xargs -0 -r sed -i "s/@project.artifactId@/${{ steps.get_version.outputs.project_name }}/"
          grep -rlZ "@project.name@" target/docker | xargs -0 -r sed -i "s/@project.name@/${{ steps.get_version.outputs.project_name }}/"
          grep -rlZ "@project.version@" target/docker | xargs -0 -r sed -i "s/@project.version@/${{ steps.get_version.outputs.project_version }}/"
          grep -rlZ "@project.description@" target/docker | xargs -0 -r sed -i "s/@project.description@/${{ steps.get_version.outputs.project_description }}/"

      - name: Helm Prepare
        run: |
          mkdir -p target/helm/${{ inputs.project_name }}
          cp -r helm/* target/helm/${{ inputs.project_name }}
          grep -rlZ "@project.artifactId@" target/helm/${{ inputs.project_name }} | xargs -0 -r sed -i "s/@project.artifactId@/$${{ steps.get_version.outputs.project_name }}/"
          grep -rlZ "@project.name@" target/helm/${{ inputs.project_name }} | xargs -0 -r sed -i "s/@project.name@/$${{ steps.get_version.outputs.project_name }}/"
          grep -rlZ "@project.version@" target/helm/${{ inputs.project_name }} | xargs -0 -r sed -i "s/@project.version@/${{ steps.get_version.outputs.project_version }}/"
          grep -rlZ "@project.description@" target/helm/${{ inputs.project_name }} | xargs -0 -r sed -i "s/@project.description@/${{ steps.get_version.outputs.project_description }}/"

      # Lint distribution files (docker and helm)
      - name: Docker lint service
        uses: hadolint/hadolint-action@v3.1.0
        with:
          dockerfile: target/docker/service.Dockerfile
          failure-threshold: warn
          output-file: hadolint-service.sarif
          format: sarif
      - name: Docker lint metrics
        uses: hadolint/hadolint-action@v3.1.0
        with:
          dockerfile: target/docker/metrics.Dockerfile
          failure-threshold: warn
          output-file: hadolint-metrics.sarif
          format: sarif
      - name: Helm lint
        run: helm lint target/helm/${{ inputs.project_name }}

      - name: Upload Hadolint service result
        if: ${{ always() }}
        uses: actions/upload-artifact@v4
        with:
          name: hadolint-service
          path: ${{github.workspace}}/hadolint-service.sarif
      - name: Upload Hadolint metrics result
        if: ${{ always() }}
        uses: actions/upload-artifact@v4
        with:
          name: hadolint-metrics
          path: ${{github.workspace}}/hadolint-metrics.sarif

      # Build distribution files (docker and helm)
      - name: Docker build service
        run: docker build -f target/docker/service.Dockerfile . -t bruxless/${{ inputs.project_name }}-service:${{ steps.get_version.outputs.project_version }}
      - name: Docker build metrics
        run: docker build -f target/docker/metrics.Dockerfile . -t bruxless/${{ inputs.project_name }}-metrics:${{ steps.get_version.outputs.project_version }}
      - name: Helm Package
        run: helm package target/helm/${{ inputs.project_name }} -d target/helm/

      # Docker SBOM
      - name: Generate sbom docker service
        uses: anchore/sbom-action@v0.17.2
        with:
          image: docker.io/bruxless/${{ inputs.project_name }}-service:${{ steps.get_version.outputs.project_version }}
          format: cyclonedx-json
          upload-artifact: false
          output-file: target/docker-sbom-${{ inputs.project_name }}-service.json

      - name: Upload sbom docker service
        if: ${{ always() }}
        uses: actions/upload-artifact@v4
        with:
          name: docker-sbom-${{ inputs.project_name }}-service.json
          path: ${{github.workspace}}/target/docker-sbom-${{ inputs.project_name }}-service.json

      - name: Generate sbom docker metrics
        uses: anchore/sbom-action@v0.17.2
        with:
          image: docker.io/bruxless/${{ inputs.project_name }}-metrics:${{ steps.get_version.outputs.project_version }}
          format: cyclonedx-json
          upload-artifact: false
          output-file: target/docker-sbom-${{ inputs.project_name }}-metrics.json

      - name: Upload sbom docker metrics
        if: ${{ always() }}
        uses: actions/upload-artifact@v4
        with:
          name: docker-sbom-${{ inputs.project_name }}-metrics.json
          path: ${{github.workspace}}/target/docker-sbom-${{ inputs.project_name }}-metrics.json

      # Clair checking
#      - name: Clair scan docker service
#        uses: quay/clair-action@v0.0.8
#        with:
#          image-ref: 'bruxless/${{ inputs.project_name }}-service:${{ steps.get_version.outputs.project_version }}'
#          output: "clair_docker_service.sarif"
#          format: 'sarif'
#      - name: Clair upload result docker service
#        if: ${{ always() }}
#        uses: actions/upload-artifact@v4
#        with:
#          name: clair-docker-service
#          path: ${{github.workspace}}/clair_docker_service.sarif
#      - name: Clair scan docker metrics
#        uses: quay/clair-action@v0.0.8
#        with:
#          image-ref: 'bruxless/${{ inputs.project_name }}-metrics:${{ steps.get_version.outputs.project_version }}'
#          output: "clair_docker_metrics.sarif"
#          format: 'sarif'
#      - name: Clair upload result docker metrics
#        if: ${{ always() }}
#        uses: actions/upload-artifact@v4
#        with:
#          name: clair-docker-metrics
#          path: ${{github.workspace}}/clair_docker_metrics.sarif

      # Dependencies checking
      - name: Trivy scan result docker service
        uses: aquasecurity/trivy-action@0.24.0
        with:
          image-ref: 'bruxless/${{ inputs.project_name }}-service:${{ steps.get_version.outputs.project_version }}'
          ignore-unfixed: true
          output: "trivy_docker_service.sarif"
          format: 'sarif'
          vuln-type: 'os,library'
          severity: '${{ inputs.trivy_docker_vuln_severity }}'
          scanners: 'vuln'
          timeout: '7m'
          github-pat: ${{ secrets.GITHUB_TOKEN }}

      - name: Trivy upload result docker service
        if: ${{ always() }}
        uses: actions/upload-artifact@v4
        with:
          name: trivy-docker-service
          path: ${{github.workspace}}/trivy_docker_service.sarif
      - name: Trivy scan result docker metrics
        uses: aquasecurity/trivy-action@0.24.0
        with:
          image-ref: 'bruxless/${{ inputs.project_name }}-metrics:${{ steps.get_version.outputs.project_version }}'
          ignore-unfixed: true
          output: "trivy_docker_metrics.sarif"
          format: 'sarif'
          vuln-type: 'os,library'
          severity: '${{ inputs.trivy_docker_vuln_severity }}'
          scanners: 'vuln'
          timeout: '7m'
          github-pat: ${{ secrets.GITHUB_TOKEN }}

      - name: Trivy upload result docker metrics
        if: ${{ always() }}
        uses: actions/upload-artifact@v4
        with:
          name: trivy-docker-metrics
          path: ${{github.workspace}}/trivy_docker_metrics.sarif

      # Tag docker if master ou release branches
      - name: Tag docker images
        if:
          contains(github.ref, 'refs/heads/main') ||
          contains(github.ref, 'refs/heads/release') ||
          contains(github.ref, 'refs/heads/develop')

        run: |
          docker tag bruxless/${{ inputs.project_name }}-service:${{ steps.get_version.outputs.project_version }} ${{ inputs.ecr_url }}/${{ inputs.project_name }}-service:${{ steps.get_version.outputs.project_version }}
          docker tag bruxless/${{ inputs.project_name }}-metrics:${{ steps.get_version.outputs.project_version }} ${{ inputs.ecr_url }}/${{ inputs.project_name }}-metrics:${{ steps.get_version.outputs.project_version }}

      # Aws login if master or release branches
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4.0.2
        if:
          contains(github.ref, 'refs/heads/main') ||
          contains(github.ref, 'refs/heads/develop') ||
          contains(github.ref, 'refs/heads/release')
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ inputs.aws_region }}

      # Push docker on ECR if master or release branches
      - name: Push images on ECR
        if:
          contains(github.ref, 'refs/heads/main') ||
          contains(github.ref, 'refs/heads/release') ||
          contains(github.ref, 'refs/heads/develop')
        run: |
          aws ecr get-login-password --region eu-west-1 | docker login --username AWS --password-stdin '${{ inputs.ecr_url }}/${{ inputs.project_name }}-service'
          docker push ${{ inputs.ecr_url }}/${{ inputs.project_name }}-service:${{ steps.get_version.outputs.project_version }}
          aws ecr get-login-password --region eu-west-1 | docker login --username AWS --password-stdin '${{ inputs.ecr_url }}/${{ inputs.project_name }}-metrics'
          docker push ${{ inputs.ecr_url }}/${{ inputs.project_name }}-metrics:${{ steps.get_version.outputs.project_version }}

      # Push Helm chart on OCI if master, release or develop branches
      - name: Push charts on OCI
        if: |
          contains(github.ref, 'refs/heads/main') ||
          contains(github.ref, 'refs/heads/release') ||
          contains(github.ref, 'refs/heads/develop')
        run: |
          aws ecr get-login-password --region ${{ inputs.aws_region }} | helm registry login --username AWS --password-stdin ${{ inputs.ecr_url }}
          helm push target/helm/${{ inputs.project_name }}-${{ steps.get_version.outputs.project_version }}.tgz oci://${{ inputs.ecr_url }}

      # Slack message if succeed
      - name: Slack - ci - succeed
        if: success()
        uses: slackapi/slack-github-action@v1.27.0
        env:
          SLACK_BOT_TOKEN: ${{ secrets.SLACK_BOT_TOKEN}}
        with:
          channel-id: ${{ inputs.slack_channel_id_ci }}
          update-ts: ${{ steps.slack.outputs.ts }}
          payload: |
            {
              "attachments": [
                {
                  "color": "57e389",
                  "title": "Build ${{ github.run_id }}-${{ github.run_number }} succeed",
                  "title_link": "https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}",
                  "fields": [
                    {
                      "value": ":clap:",
                      "short": true
                    },
                    {
                      "title": "Status",
                      "value": "Succeed",
                      "short": true
                    },
                    {
                      "title": "Repository",
                      "value": "<https://github.com/${{ github.repository }}|${{ github.repository }}>",
                      "short": false
                    },
                    {
                      "title": "Branch",
                      "value": "<https://github.com/${{ github.repository }}/tree/${{ github.ref_name }}|${{ github.ref_name }}>",
                      "short": false
                    }
                  ]
                }
              ]
            }

      # Slack message if failed
      - name: Slack - ci - failed
        if: failure()
        uses: slackapi/slack-github-action@v1.27.0
        env:
          SLACK_BOT_TOKEN: ${{ secrets.SLACK_BOT_TOKEN}}
        with:
          channel-id: ${{ inputs.slack_channel_id_ci }}
          update-ts: ${{ steps.slack.outputs.ts }}
          payload: |
            {
              "attachments": [
                {
                  "color": "ed333b",
                  "title": "Build ${{ github.run_id }}-${{ github.run_number }} failed",
                  "title_link": "https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}",
                  "fields": [
                    {
                      "value": ":-1:",
                      "short": true
                    },
                    {
                      "title": "Status",
                      "value": "Failed",
                      "short": true
                    },
                    {
                      "title": "Repository",
                      "value": "<https://github.com/${{ github.repository }}|${{ github.repository }}>",
                      "short": false
                    },
                    {
                      "title": "Branch",
                      "value": "<https://github.com/${{ github.repository }}/tree/${{ github.ref_name }}|${{ github.ref_name }}>",
                      "short": false
                    }
                  ]
                }
              ]
            }

      ## Create release
      - name: Extract changelog part for release
        if:
          success() &&
          (
          contains(github.ref, 'refs/heads/main') ||
          contains(github.ref, 'refs/heads/release')
          )
        run: |
          sed -n "/\[${{ steps.get_version.outputs.project_version }}\]/,/## \[/p" CHANGELOG.md | sed -e '1d' -e '$d' > part_changelog.md
      - name: Create GitHub release
        uses: softprops/action-gh-release@v2.0.8
        if:
          success() &&
          (
          contains(github.ref, 'refs/heads/main') ||
          contains(github.ref, 'refs/heads/release')
          )
        with:
          body_path: part_changelog.md
          tag_name: ${{ steps.get_version.outputs.project_version }}
          files: |
            eslint_npm.sarif
            trivy_npm.sarif
            trivy_docker_service.sarif
            trivy_docker_metrics.sarif
            hadolint-service.sarif
            hadolint-metrics.sarif
            target/bom.json
            target/docker-sbom-${{ inputs.project_name }}-service.json
            target/docker-sbom-${{ inputs.project_name }}-metrics.json

      # Slack message for release
      - name: Slack - ci_release - succeed
        if:
          success() &&
          (
          contains(github.ref, 'refs/heads/main') ||
          contains(github.ref, 'refs/heads/release')
          )
        uses: slackapi/slack-github-action@v1.27.0
        env:
          SLACK_BOT_TOKEN: ${{ secrets.SLACK_BOT_TOKEN}}
        with:
          channel-id: ${{ inputs.slack_channel_id_ci_release }}
          payload: |
            {
              "attachments": [
                {
                  "color": "57e389",
                  "title": "Release ${{ steps.get_version.outputs.project_version }} available",
                  "title_link": "https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}",
                  "fields": [
                    {
                      "value": ":clap:",
                      "short": true
                    },
                    {
                      "title": "Status",
                      "value": "Succeed",
                      "short": true
                    },
                    {
                      "title": "Repository",
                      "value": "<https://github.com/${{ github.repository }}|${{ github.repository }}>",
                      "short": false
                    },
                    {
                      "title": "Branch",
                      "value": "<https://github.com/${{ github.repository }}/tree/${{ github.ref_name }}|${{ github.ref_name }}>",
                      "short": false
                    }
                  ]
                }
              ]
            }

      - name: Slack - ci_release - failed
        if:
          failure() &&
          (
          contains(github.ref, 'refs/heads/main') ||
          contains(github.ref, 'refs/heads/release')
          )
        uses: slackapi/slack-github-action@v1.27.0
        env:
          SLACK_BOT_TOKEN: ${{ secrets.SLACK_BOT_TOKEN}}
        with:
          channel-id: ${{ inputs.slack_channel_id_ci_release }}
          payload: |
            {
              "attachments": [
                {
                  "color": "ed333b",
                  "title": "Release ${{ steps.get_version.outputs.project_version }} failed",
                  "title_link": "https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}",
                  "fields": [
                    {
                      "value": ":-1:",
                      "short": true
                    },
                    {
                      "title": "Status",
                      "value": "Failed",
                      "short": true
                    },
                    {
                      "title": "Repository",
                      "value": "<https://github.com/${{ github.repository }}|${{ github.repository }}>",
                      "short": false
                    },
                    {
                      "title": "Branch",
                      "value": "<https://github.com/${{ github.repository }}/tree/${{ github.ref_name }}|${{ github.ref_name }}>",
                      "short": false
                    }
                  ]
                }
              ]
            }
