name: CI for maven microservice

on:
  workflow_call:
    inputs:
      java_distribution:
        description: "The java distribution (default to temurin)"
        type: string
        required: false
        default: "temurin"
      java_version:
        description: "The java version (default to 17)"
        type: string
        required: false
        default: "17"
      helm_version:
        description: "The helm version (default to 3.12.0)"
        type: string
        required: false
        default: "3.12.0"
      slack_channel_id_ci:
        description: "The CI Slack channel's id"
        type: string
        required: true
      slack_channel_id_ci_release:
        description: "The CI release Slack channel's id"
        type: string
        required: true
      sonar_organization:
        description: "The sonar organization"
        type: string
        required: true
      sonar_host_url:
        description: "The sonar host url"
        type: string
        required: true
      sonar_project_key:
        description: "The sonar project key"
        type: string
        required: true
      project_name:
        description: "The project name"
        type: string
        required: true
      aws_region:
        description: "The AWS region"
        type: string
        required: false
        default: "eu-west-1"
      ecr_url:
        description: "The ECR url"
        type: string
        required: true
      chart_museum_url:
        description: "The ChartMuseum URL"
        type: string
        required: true
      enable_trivy_exit:
        description: "Enable Trivy failure when CVE are found, you can deactivate this behavior"
        type: boolean
        required: false
        default: false
    secrets:
      SLACK_BOT_TOKEN:
        description: "The slack bot token"
        required: true
      SONAR_TOKEN:
        description: "The sonar token"
        required: true
      AWS_ACCESS_KEY_ID:
        description: "The AWS access key"
        required: true
      AWS_SECRET_ACCESS_KEY:
        description: "The AWS secret access key"
        required: true

jobs:
  ci:
    runs-on: ubuntu-22.04
    steps:

      # Checkout project
      - name: Checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      # Setup Java
      - name: Set up JDK ${{ inputs.java_distribution }}/${{ inputs.java_version }}
        uses: actions/setup-java@v3
        with:
          java-version: ${{ inputs.java_version }}
          distribution: ${{ inputs.java_distribution }}
          cache: maven

      # Setup helm
      - name: Set up helm ${{ inputs.helm_version }}
        uses: azure/setup-helm@v3
        with:
          version: ${{ inputs.helm_version }}

      # Cache Sonarcloud packages
      - name: Cache SonarCloud packages
        uses: actions/cache@v3
        with:
          path: ~/.sonar/cache
          key: ${{ runner.os }}-sonar
          restore-keys: ${{ runner.os }}-sonar

      # Cache maven packages
      - name: Cache Maven packages
        uses: actions/cache@v3
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2

      # Slack message start
      - name: Slack - ci - started
        id: slack
        uses: slackapi/slack-github-action@v1.23.0
        env:
          SLACK_BOT_TOKEN: ${{ secrets.SLACK_BOT_TOKEN }}
        with:
          channel-id: ${{ inputs.slack_channel_id_ci }}
          payload: |
            {
              "attachments": [
                {
                  "color": "62a0ea",
                  "title": "Build ${{ github.run_id }}-${{ github.run_number }} started",
                  "title_link": "https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}",
                  "fields": [
                    {
                      "value": ":the_horns:",
                      "short": true
                    },
                    {
                      "title": "Status",
                      "value": "In Progress",
                      "short": true
                    },
                    {
                      "title": "Repository",
                      "value": "<https://github.com/${{ github.repository }}|${{ github.repository }}>",
                      "short": false
                    },
                    {
                      "title": "Branch",
                      "value": "<https://github.com/${{ github.repository }}/tree/${{ github.ref_name }}|${{ github.ref_name }}>",
                      "short": false
                    }
                  ]
                }
              ]
            }

      # Project version and information
      - name: Retrieve project version
        id: get_version
        run: |
          echo "project_version=$(mvn help:evaluate -Dexpression=project.version -q -DforceStdout  --file pom.xml)" >> $GITHUB_OUTPUT

      # Maven compile and tests
      - name: Maven compile
        run: mvn -B compile -Pci -Dfull.build.number=${{ github.run_id }}-${{ github.run_number }} --file pom.xml
      - name: Maven tests
        run: mvn -B integration-test -Pci -Dfull.build.number=${{ github.run_id }}-${{ github.run_number }} --file pom.xml
      - name: Maven package
        run: mvn -B install -Pci -DskipTests -Dfull.build.number=${{ github.run_id }}-${{ github.run_number }} --file pom.xml

      # Sonar analysis
      - name: SonarCloud scan
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        run: mvn -X -B org.sonarsource.scanner.maven:sonar-maven-plugin:sonar -Pci -DskipTests -Dfull.build.number=${{ github.run_id }}-${{ github.run_number }} -Dsonar.organization=${{ inputs.sonar_organization }} -Dsonar.host.url=${{ inputs.sonar_host_url }} -Dsonar.projectKey=${{ inputs.sonar_project_key }} --file pom.xml

      # Sonarqube quality gate
      - name: SonarCloud Quality Gate check
        id: sonarcloud-quality-gate-check
        if:
          contains('refs/heads/main', github.ref) ||
          contains('refs/heads/release', github.ref) ||
          contains('refs/heads/develop', github.ref)
        uses: sonarsource/sonarqube-quality-gate-action@v1.1.0
        timeout-minutes: 5
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        with:
          scanMetadataReportFile: target/sonar/report-task.txt

      # Dependencies checking
      - name: Trivy scan maven
        uses: aquasecurity/trivy-action@0.10.0
        with:
          scan-type: 'fs'
          exit-code: '1'
          ignore-unfixed: false
          output: "trivy_maven.sarif"
          format: 'sarif'
          vuln-type: 'library'
          severity: 'UNKNOWN,LOW,MEDIUM,HIGH,CRITICAL'
          scanners: 'vuln'
          timeout: '7m'

      # Can be deleted when this issue is closed : https://github.com/aquasecurity/trivy-action/issues/228
      - name: Check maven trivy results
        if: ${{ inputs.enable_trivy_exit }}
        run: |
          if grep -qE 'UNKNOWN|LOW|MEDIUM|HIGH|CRITICAL' trivy_maven.sarif; then
            echo "Vulnerabilities found"
            exit 1
          else
            echo "No significant vulnerabilities found"
            exit 0
          fi

      # Save trivy result as artifact
      - name: Trivy upload result maven
        if: ${{ always() }}
        uses: actions/upload-artifact@v3
        with:
          name: trivy-maven
          path: ${{github.workspace}}/trivy_maven.sarif

      # Prepare distribution files (docker and helm)
      - name: Docker Prepare
        run: mvn -B process-resources -Pci -Pdocker -DskipTests -Dfull.build.number=${{ github.run_id }}-${{ github.run_number }} --file pom.xml
      - name: Helm Prepare
        run: mvn -B process-resources -Pci -Phelm -DskipTests -Dfull.build.number=${{ github.run_id }}-${{ github.run_number }} --file pom.xml

      # Lint distribution files (docker and helm)
      - name: Docker lint base-java${{ inputs.java_version }}
        uses: hadolint/hadolint-action@v3.0.0
        with:
          dockerfile: ${{ inputs.project_name }}-service/target/base-java${{ inputs.java_version }}.Dockerfile
          failure-threshold: warn
          output-file: hadolint-base-java${{ inputs.java_version }}.sarif
          format: sarif
      - name: Docker lint base-liquibase
        uses: hadolint/hadolint-action@v3.0.0
        with:
          dockerfile: ${{ inputs.project_name }}-service/target/base-liquibase.Dockerfile
          failure-threshold: warn
          output-file: hadolint-base-liquibase.sarif
          format: sarif
      - name: Docker lint db
        uses: hadolint/hadolint-action@v3.0.0
        with:
          dockerfile: ${{ inputs.project_name }}-service/target/db.Dockerfile
          failure-threshold: warn
          output-file: hadolint-db.sarif
          format: sarif
      - name: Docker lint service
        uses: hadolint/hadolint-action@v3.0.0
        with:
          dockerfile: ${{ inputs.project_name }}-service/target/service.Dockerfile
          failure-threshold: warn
          output-file: hadolint-service.sarif
          format: sarif

      - name: Upload Hadolint base-java${{ inputs.java_version }} result
        if: ${{ always() }}
        uses: actions/upload-artifact@v3
        with:
          name: hadolint-base-java${{ inputs.java_version }}
          path: ${{github.workspace}}/hadolint-base-java${{ inputs.java_version }}.sarif
      - name: Upload Hadolint base-liquibase result
        if: ${{ always() }}
        uses: actions/upload-artifact@v3
        with:
          name: hadolint-base-liquibase
          path: ${{github.workspace}}/hadolint-base-liquibase.sarif
      - name: Upload Hadolint db result
        if: ${{ always() }}
        uses: actions/upload-artifact@v3
        with:
          name: hadolint-db
          path: ${{github.workspace}}/hadolint-db.sarif
      - name: Upload Hadolint service result
        if: ${{ always() }}
        uses: actions/upload-artifact@v3
        with:
          name: hadolint-service
          path: ${{github.workspace}}/hadolint-service.sarif

      - name: Helm lint
        run: helm lint ${{ inputs.project_name }}-service/target/helm/${{ inputs.project_name }}

      # Build distribution files (docker and helm)
      - name: Docker build base-java${{ inputs.java_version }}
        run: docker build -f ${{ inputs.project_name }}-service/target/base-java${{ inputs.java_version }}.Dockerfile ${{ inputs.project_name }}-service/target/ -t bruxless/${{ inputs.project_name }}-base-java${{ inputs.java_version }}:${{ steps.get_version.outputs.project_version }}
      - name: Docker build base-liquibase
        run: docker build -f ${{ inputs.project_name }}-service/target/base-liquibase.Dockerfile ${{ inputs.project_name }}-service/target/ -t bruxless/${{ inputs.project_name }}-base-liquibase:${{ steps.get_version.outputs.project_version }}
      - name: Docker build db
        run: docker build -f ${{ inputs.project_name }}-service/target/db.Dockerfile ${{ inputs.project_name }}-domain/target/ -t bruxless/${{ inputs.project_name }}-db:${{ steps.get_version.outputs.project_version }}
      - name: Docker build service
        run: docker build -f ${{ inputs.project_name }}-service/target/service.Dockerfile ${{ inputs.project_name }}-service/target/ -t bruxless/${{ inputs.project_name }}-service:${{ steps.get_version.outputs.project_version }}
      - name: Helm Package
        run: helm package ${{ inputs.project_name }}-service/target/helm/${{ inputs.project_name }} -d ${{ inputs.project_name }}-service/target/helm/

      # Dependencies checking
      - name: Trivy scan docker db
        uses: aquasecurity/trivy-action@0.10.0
        with:
          image-ref: 'bruxless/${{ inputs.project_name }}-db:${{ steps.get_version.outputs.project_version }}'
          exit-code: '1'
          ignore-unfixed: true
          output: "trivy_docker_db.sarif"
          format: 'sarif'
          vuln-type: 'os,library'
          severity: 'HIGH,CRITICAL'
          scanners: 'vuln'
          timeout: '7m'
      # Can be deleted when this issue is closed : https://github.com/aquasecurity/trivy-action/issues/228
      - name: Check docker db trivy results
        if: ${{ inputs.enable_trivy_exit }}
        run: |
          if grep -qE 'HIGH|CRITICAL' trivy_docker_db.sarif; then
            echo "Vulnerabilities found"
            exit 1
          else
            echo "No significant vulnerabilities found"
            exit 0
          fi
      - name: Trivy upload result docker db
        if: ${{ always() }}
        uses: actions/upload-artifact@v3
        with:
          name: trivy-docker-db
          path: ${{github.workspace}}/trivy_docker_db.sarif

      - name: Trivy scan docker service
        uses: aquasecurity/trivy-action@0.10.0
        with:
          image-ref: 'bruxless/${{ inputs.project_name }}-service:${{ steps.get_version.outputs.project_version }}'
          exit-code: '1'
          ignore-unfixed: true
          output: "trivy_docker_service.sarif"
          format: 'sarif'
          vuln-type: 'os,library'
          severity: 'HIGH,CRITICAL'
          scanners: 'vuln'
          timeout: '7m'
      # Can be deleted when this issue is closed : https://github.com/aquasecurity/trivy-action/issues/228
      - name: Check docker service trivy results
        if: ${{ inputs.enable_trivy_exit }}
        run: |
          if grep -qE 'HIGH|CRITICAL' trivy_docker_service.sarif; then
            echo "Vulnerabilities found"
            exit 1
          else
            echo "No significant vulnerabilities found"
            exit 0
          fi
      - name: Trivy upload result docker service
        if: ${{ always() }}
        uses: actions/upload-artifact@v3
        with:
          name: trivy-docker-service
          path: ${{github.workspace}}/trivy_docker_service.sarif

      # Tag docker if master or release branches
      - name: Tag docker images
        if:
          contains('refs/heads/main', github.ref) ||
          contains('refs/heads/release', github.ref)
        run: |
          docker tag bruxless/${{ inputs.project_name }}-db:${{ steps.get_version.outputs.project_version }} ${{ inputs.ecr_url }}/${{ inputs.project_name }}-db:${{ steps.get_version.outputs.project_version }}
          docker tag bruxless/${{ inputs.project_name }}-service:${{ steps.get_version.outputs.project_version }} ${{ inputs.ecr_url }}/${{ inputs.project_name }}-service:${{ steps.get_version.outputs.project_version }}

      # Tag docker if develop branche
      - name: Tag snapshot docker images
        if:
          contains('refs/heads/develop', github.ref)
        run: |
          docker tag bruxless/${{ inputs.project_name }}-db:${{ steps.get_version.outputs.project_version }} ${{ inputs.ecr_url }}/${{ inputs.project_name }}-db-snapshot:${{ steps.get_version.outputs.project_version }}
          docker tag bruxless/${{ inputs.project_name }}-service:${{ steps.get_version.outputs.project_version }} ${{ inputs.ecr_url }}/${{ inputs.project_name }}-service-snapshot:${{ steps.get_version.outputs.project_version }}

      # Aws login if master, develop or release branches
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2.0.0
        if:
          contains('refs/heads/main', github.ref) ||
          contains('refs/heads/develop', github.ref) ||
          contains('refs/heads/release', github.ref)
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ inputs.aws_region }}
      
      # Push docker on ECR if master or release branches
      - name: Push images on ECR
        if:
          contains('refs/heads/main', github.ref) ||
          contains('refs/heads/release', github.ref)
        run: |
          aws ecr get-login-password --region ${{ inputs.aws_region }} | docker login --username AWS --password-stdin '${{ inputs.ecr_url }}/${{ inputs.project_name }}-db'
          docker push ${{ inputs.ecr_url }}/${{ inputs.project_name }}-db:${{ steps.get_version.outputs.project_version }}
          aws ecr get-login-password --region ${{ inputs.aws_region }} | docker login --username AWS --password-stdin '${{ inputs.ecr_url }}/${{ inputs.project_name }}-service'
          docker push ${{ inputs.ecr_url }}/${{ inputs.project_name }}-service:${{ steps.get_version.outputs.project_version }}

      # Push docker on ECR if develop branch
      - name: Push images on ECR for snapshot
        if:
          contains('refs/heads/develop', github.ref)
        run: |
          aws ecr get-login-password --region ${{ inputs.aws_region }} | docker login --username AWS --password-stdin '${{ inputs.ecr_url }}/${{ inputs.project_name }}-db-snapshot'
          docker push ${{ inputs.ecr_url }}/${{ inputs.project_name }}-db-snapshot:${{ steps.get_version.outputs.project_version }}
          aws ecr get-login-password --region ${{ inputs.aws_region }} | docker login --username AWS --password-stdin '${{ inputs.ecr_url }}/${{ inputs.project_name }}-service-snapshot'
          docker push ${{ inputs.ecr_url }}/${{ inputs.project_name }}-service-snapshot:${{ steps.get_version.outputs.project_version }}

      # Helm configure if master, develop or release branches
      - name: Configure Helm s3 plugin
        if:
          contains('refs/heads/main', github.ref) ||
          contains('refs/heads/develop', github.ref) ||
          contains('refs/heads/release', github.ref)
        run: |
          helm plugin install https://github.com/hypnoglow/helm-s3.git

      - name: Add bruxless helm repo
        if:
          contains('refs/heads/main', github.ref) ||
          contains('refs/heads/develop', github.ref) ||
          contains('refs/heads/release', github.ref)
        run: |
          helm repo add bruxless ${{ inputs.chart_museum_url }}
      
      # Push Helm chart on S3 if master or release branches
      - name: Push charts on S3
        if:
          contains('refs/heads/main', github.ref) ||
          contains('refs/heads/release', github.ref)
        run: |
          helm s3 push ${{ inputs.project_name }}-service/target/helm/${{ inputs.project_name }}-${{ steps.get_version.outputs.project_version }}.tgz bruxless

      # Push Helm chart on S3 if develop branche (allow helm push overwrite)
      - name: Push charts on S3 for snapshot
        if:
          contains('refs/heads/develop', github.ref)
        run: |
          helm s3 push --force ${{ inputs.project_name }}-service/target/helm/${{ inputs.project_name }}-${{ steps.get_version.outputs.project_version }}.tgz bruxless

      # Slack message if succeed
      - name: Slack - ci - succeed
        if: success()
        uses: slackapi/slack-github-action@v1.23.0
        env:
          SLACK_BOT_TOKEN: ${{ secrets.SLACK_BOT_TOKEN}}
        with:
          channel-id: ${{ inputs.slack_channel_id_ci }}
          update-ts: ${{ steps.slack.outputs.ts }}
          payload: |
            {
              "attachments": [
                {
                  "color": "57e389",
                  "title": "Build ${{ github.run_id }}-${{ github.run_number }} succeed",
                  "title_link": "https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}",
                  "fields": [
                    {
                      "value": ":clap:",
                      "short": true
                    },
                    {
                      "title": "Status",
                      "value": "Succeed",
                      "short": true
                    },
                    {
                      "title": "Repository",
                      "value": "<https://github.com/${{ github.repository }}|${{ github.repository }}>",
                      "short": false
                    },
                    {
                      "title": "Branch",
                      "value": "<https://github.com/${{ github.repository }}/tree/${{ github.ref_name }}|${{ github.ref_name }}>",
                      "short": false
                    }
                  ]
                }
              ]
            }

      # Slack message if failed
      - name: Slack - ci - failed
        if: failure()
        uses: slackapi/slack-github-action@v1.23.0
        env:
          SLACK_BOT_TOKEN: ${{ secrets.SLACK_BOT_TOKEN}}
        with:
          channel-id: ${{ inputs.slack_channel_id_ci }}
          update-ts: ${{ steps.slack.outputs.ts }}
          payload: |
            {
              "attachments": [
                {
                  "color": "ed333b",
                  "title": "Build ${{ github.run_id }}-${{ github.run_number }} failed",
                  "title_link": "https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}",
                  "fields": [
                    {
                      "value": ":-1:",
                      "short": true
                    },
                    {
                      "title": "Status",
                      "value": "Failed",
                      "short": true
                    },
                    {
                      "title": "Repository",
                      "value": "<https://github.com/${{ github.repository }}|${{ github.repository }}>",
                      "short": false
                    },
                    {
                      "title": "Branch",
                      "value": "<https://github.com/${{ github.repository }}/tree/${{ github.ref_name }}|${{ github.ref_name }}>",
                      "short": false
                    }
                  ]
                }
              ]
            }

      ## Create release
      - name: Extract changelog part for release
        if:
          success() &&
          (
          contains('refs/heads/main', github.ref) ||
          contains('refs/heads/release', github.ref)
          )
        run: |
          sed -n "/\[${{ steps.get_version.outputs.project_version }}\]/,/## \[/p" CHANGELOG.md | sed -e '1d' -e '$d' > part_changelog.md

      - name: Create GitHub release
        uses: softprops/action-gh-release@v0.1.15
        if:
          success() &&
          (
          contains('refs/heads/main', github.ref) ||
          contains('refs/heads/release', github.ref)
          )
        with:
          body_path: part_changelog.md
          tag_name: ${{ steps.get_version.outputs.project_version }}
          files: |
            trivy_maven.sarif
            trivy_docker_db.sarif
            trivy_docker_service.sarif
            hadolint-base-java${{ inputs.java_version }}.sarif
            hadolint-base-liquibase.sarif
            hadolint-db.sarif
            hadolint-service.sarif

      # Slack message for release
      - name: Slack - ci_release - succeed
        if:
          success() &&
          (
          contains('refs/heads/main', github.ref) ||
          contains('refs/heads/release', github.ref)
          )
        uses: slackapi/slack-github-action@v1.23.0
        env:
          SLACK_BOT_TOKEN: ${{ secrets.SLACK_BOT_TOKEN}}
        with:
          channel-id: ${{ inputs.slack_channel_id_ci_release }}
          payload: |
            {
              "attachments": [
                {
                  "color": "57e389",
                  "title": "Release ${{ steps.get_version.outputs.project_version }} available",
                  "title_link": "https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}",
                  "fields": [
                    {
                      "value": ":clap:",
                      "short": true
                    },
                    {
                      "title": "Status",
                      "value": "Succeed",
                      "short": true
                    },
                    {
                      "title": "Repository",
                      "value": "<https://github.com/${{ github.repository }}|${{ github.repository }}>",
                      "short": false
                    },
                    {
                      "title": "Branch",
                      "value": "<https://github.com/${{ github.repository }}/tree/${{ github.ref_name }}|${{ github.ref_name }}>",
                      "short": false
                    }
                  ]
                }
              ]
            }

      - name: Slack - ci_release - failed
        if:
          failure() &&
          (
          contains('refs/heads/main', github.ref) ||
          contains('refs/heads/release', github.ref)
          )
        uses: slackapi/slack-github-action@v1.23.0
        env:
          SLACK_BOT_TOKEN: ${{ secrets.SLACK_BOT_TOKEN}}
        with:
          channel-id: ${{ inputs.slack_channel_id_ci_release }}
          payload: |
            {
              "attachments": [
                {
                  "color": "ed333b",
                  "title": "Release ${{ steps.get_version.outputs.project_version }} failed",
                  "title_link": "https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}",
                  "fields": [
                    {
                      "value": ":-1:",
                      "short": true
                    },
                    {
                      "title": "Status",
                      "value": "Failed",
                      "short": true
                    },
                    {
                      "title": "Repository",
                      "value": "<https://github.com/${{ github.repository }}|${{ github.repository }}>",
                      "short": false
                    },
                    {
                      "title": "Branch",
                      "value": "<https://github.com/${{ github.repository }}/tree/${{ github.ref_name }}|${{ github.ref_name }}>",
                      "short": false
                    }
                  ]
                }
              ]
            }
